}
fun_basicsdt(0.2, 0.4)
#plot(seq(-3,3,0.1), dnorm(seq(-3,3,0.1)), type='l')
# Espiritista
fun_basicsdt(0.92, 0.48)
# Partici
fun_basicsdt(0.58, 0.09)
# Ej 5
h <- 17 / (17+11)
f <- (31-17) / (50-(17+11))
fun_basicsdt(h, f)
h_1 <- 25/30
f_1 <- (30-5)/(200-30)
fun_basicsdt(h_1, f_1)
h_2 <- 15/28
f_2 <- (28-15)/(150-28)
fun_basicsdt(h_2, f_2)
dp <- 1.5
criterio <- dp / 2.0
# desviación estándar de la distribución correspondiente a "señal+ruido"
sigmaS <- 1
# desviación estándar de la distribución correspondiente a "ruido"
sigmaN <- 1
# Centro el ruido en 0
muN <- 0
muS <- muN + dp
grilla <- seq(muN-3, muS+3, 0.1)
plot(grilla, dnorm(grilla, mean=muN), xlab='Valor', ylab='likelihood',
type='l', col='red', lwd=3, xaxt='n')
axis(1, at=seq(muN-3, muS+3, 0.15), las=2)
grid()
abline(v=muN, col='red', lwd=1, lty=2)
points(grilla, dnorm(grilla, mean=muS), type='l', col='blue', lwd=3)
abline(v=muS, col='blue', lwd=1, lty=2)
abline(v=criterio, col='green', lwd=3)
legend("topleft", cex=0.8, fill=c('red','blue','green'),
legend=c('Distribución de Ruido','Distribución de Señal','Criterio'))
arrows(x0=muN, x1=muS, y0=0.1, y1=0.1, code=3, angle = 15)
text(x=dp/4, y=0.12, "d'", cex=1.5)
ntrialsS <- 50000
ntrialsN <- 50000
# La información de qué estímulo corresponde a cada trial la vamos a guardar en la
# variable Label:
# señal+ruido ---> 1
# ruido ---> 0
# Crear un vector de Labels para cada tipo de estímulo. El largo de cada vector debe ser
# ntrialsS y ntrialsN
signalLabels <- rep(1, ntrialsS)
noiseLabels  <- rep(0, ntrialsN)
# Tomar las muestras de cada distribución.
signalSamples <- rnorm(ntrialsS, mean=muS, sd=sigmaS)
noiseSamples  <- rnorm(ntrialsN, mean=muN, sd=sigmaN)
# Poner todas las muestras juntas, primero las de'señal+ruido', luego las de'ruido'
allSamples <- append(signalSamples, noiseSamples)
# Hacer lo mismo con los vectores de Labels
allLabels <- append(signalLabels, noiseLabels)
# Defino maxCount para que el segundo histograma no se vaya del grafico
maxCount <- max(hist(noiseSamples, plot=F)$density, hist(signalSamples, plot=F)$density)
hist(noiseSamples, col='red', xlim=c(muN-4,muS+4), ylim=c(0, maxCount), freq=F,
main="Muestras diferenciadas", xlab='Valor', ylab='Frecuencia relativa', xaxt='n')
hist(signalSamples, add=T, col=rgb(0.0,0.0,1,0.5), alpha=0.5, freq=F)
axis(1, at=seq(muN-3, muS+3, 0.15), las=2)
abline(v=criterio, col='green', lwd=3)
legend("topleft", cex=0.8, fill=c('red','blue','green'),
legend=c('Solo Ruido','Señal + Ruido','Criterio'))
hist(c(noiseSamples,signalSamples), col='violet', xlim=c(muN-4,muS+4), freq=F,
main="Muestras como Observaciones", xlab='Valor observado', ylab='Frecuencia relativa',xaxt='n')
axis(1, at=seq(muN-3, muS+3, 0.15), las=2)
abline(v=criterio, col='green', lwd=3)
legend("topleft", cex=0.8, fill=c('violet','green'),
legend=c('Observaciones desconocidas','Criterio'))
decision <- as.integer(allSamples > criterio)
isCorrect <- decision == allLabels
percentCorrect <- mean(isCorrect)
# definir un vector isHit y otro isFA que evalúa si cada trial es un hit o una
# falsa alarma, respectivamente.
isHit <- isCorrect == 1 & decision == 1
isFA  <- isCorrect == 0 & decision == 1
# suma los vectores anteriores para tener el número de hits y falsas alarmas
nHits <- sum(isHit)
nFAs  <- sum(isFA)
# calcula la tasa de hits y de falsas alarmas
h <- nHits / ntrialsS
f <- nFAs / ntrialsN
# Defino maxCount para que el segundo histograma no se vaya del grafico
maxCount <- max(hist(noiseSamples, plot=F)$density, hist(signalSamples, plot=F)$density)
# Histograma de Ruido y su curva
hist(noiseSamples, col='red', xlim=c(muN-4,muS+4), ylim=c(0, maxCount), freq=F,
main="Áreas bajo las curvas", xlab='Valor', ylab='Frecuencia', xaxt='n')
points(grilla, dnorm(grilla, mean=muS)*maxCount*2.5, type='l', col='blue', lwd=3)
# Histograma de Señal + Ruido y su curva
hist(signalSamples, add=T, col=rgb(0.0,0.0,1,0.5), alpha=0.5, freq=F)
points(grilla, dnorm(grilla, mean=muN)*maxCount*2.5, type='l', col='red', lwd=3)
axis(1, at=seq(muN-3, muS+3, 0.15), las=2)
# Transparento valores a la izquierda
rect(xleft=-4, xright=criterio, ybottom=0, ytop=maxCount, col=rgb(1,1,1,0.7), border=rgb(1,1,1,0.5))
# Criterio
abline(v=criterio, col='green', lwd=3)
# Texto para h y f
legend(x=1.25*criterio, y=maxCount/10, "Falsas \nAlarmas", adj=c(0.35,0.3), cex=0.7,
bg=rgb(1,0.0,0,0.5), box.col =rgb(1,0.0,0,0.5), text.width=0.5)
legend(x=3*criterio, y=maxCount/5, "Hits", adj=c(0.35,0.3), cex=0.8,
bg=rgb(0,0.0,1,0.5), box.col =rgb(0,0.0,1,0.5), text.width=0.5)
legend("topleft", cex=0.8, fill=c('red','blue','green'),
legend=c('Solo Ruido','Señal + Ruido','Criterio'))
dprime_estimado <- ___
c_estimado <- ___
dp <- 1.5
dp <- 1.5
muN <- 0
muS <- muN + dp
sigma <- 1
# prop=0.2: 20% ruido, 80% señal
prop <- 0.5
ntrials <- 10000
ntrialsN <- ntrials*prop
ntrialsS <- ntrials*(1-prop)
# La información de qué estímulo corresponde a cada trial la vamos a guardar en la
# variable Label:
# señal+ruido ---> 1
# ruido ---> 0
# Crear un vector de Labels para cada tipo de estímulo. El largo de cada vector debe ser
# ntrialsS y ntrialsN
signalLabels <- rep(1, ntrialsS)
noiseLabels  <- rep(0, ntrialsN)
# Tomar las muestras de cada distribución.
signalSamples <- rnorm(ntrialsS, mean=muS, sd=sigma)
noiseSamples  <- rnorm(ntrialsN, mean=muN, sd=sigma)
# Poner todas las muestras juntas, primero las de'señal+ruido', luego las de'ruido'
allSamples <- append(signalSamples, noiseSamples)
# Hacer lo mismo con los vectores de Labels
allLabels <- append(signalLabels, noiseLabels)
hist(allSamples, col=rgb(1,1,1, 0.5), prob=F, main="Histogramas de las muestras", yaxt="n")
grid(11)
m <- max(hist(allSamples, plot=F)$counts)
ytick<-seq(0, m, length.out=11)
axis(side=2, at=ytick, labels = FALSE)
text(par("usr")[1], ytick,
labels = round(ytick/m,2), pos = 2, xpd = TRUE)
hist(signalSamples, prob=F, add=T, col=rgb(0,0,1, 0.5))
hist(noiseSamples, prob=F, add=T, col=rgb(1,0,0, 0.5))
criterios <- c(-0.5, 0.2, dp/2 ,1.7, 2.5)
hist(allSamples, col=rgb(1,1,1, 0.5), prob=F, main="Criterios sobre histogramas", yaxt="n")
grid(11)
m <- max(hist(allSamples, plot=F)$counts)
ytick<-seq(0, m, length.out=11)
axis(side=2, at=ytick, labels = FALSE)
text(par("usr")[1], ytick,
labels = round(ytick/m,2), pos = 2, xpd = TRUE)
hist(signalSamples, prob=F, add=T, col=rgb(0,0,1, 0.5))
hist(noiseSamples, prob=F, add=T, col=rgb(1,0,0, 0.5))
abline(v=criterios, col='green', lwd=3, lty=3)
decisiones <- data.frame(no.alta=rep(0,2),
no.media=rep(0,2),
no.baja=rep(0,2),
si.baja=rep(0,2),
si.media=rep(0,2),
si.alta=rep(0,2))
rownames(decisiones) <- c('ruido','señal')
decisiones
decisiones['ruido', 1] <- sum(noiseSamples < criterios[1])
decisiones['señal', 1] <- sum(signalSamples < criterios[1])
for(c in 2:5){
decisiones['ruido', c] <- sum(noiseSamples  > criterios[c-1] & noiseSamples  < criterios[c])
decisiones['señal', c] <- sum(signalSamples > criterios[c-1] & signalSamples < criterios[c])
}
decisiones['ruido', 6] <- sum(noiseSamples  > criterios[5])
decisiones['señal', 6] <- sum(signalSamples > criterios[5])
decisiones
#Verifico valores
sum(decisiones['ruido',])
sum(decisiones['señal',])
tasas <- decisiones/5000
rownames(tasas) <- c('fa', 'hit')
tasas
ROC.n <- rep(NA, 6)
ROC.s <- rep(NA, 6)
for(i in 6:1){
ROC.n[i] <- sum(tasas['fa', 6:i])
ROC.s[i] <- sum(tasas['hit', 6:i])
}
#ROC.n
#ROC.s
plot(ROC.n, ROC.s, type='b', lwd=3, col='steelblue', main="Curva ROC Empírica")
lines(c(ROC.n[6], ROC.n[1]), c(ROC.s[6], ROC.s[1]), lty=3)
grid()
data <- read.csv('depredadosclasificadas.txt', sep=' ')
head(data)
regla5 <- function(x){
# x: numerico o vector
return(as.integer(x>=5))
}
preds.5 <- regla5(data$removidos)
error.5 <- mean(abs(preds.5 - data$especie))
error.5
rechazadorpar <- function(x){
# la mejor regla jamás vista
return(as.integer(x%%2==0))
}
preds.par <- rechazadorpar(data$removidos)
error.par <- mean(abs(preds.par - data$especie))
error.par
reglacorte <- function(x, t){
return(as.integer(x>=t))
}
ts <- 0:8
error.t <- rep(NA, length(ts))
for(t in ts){
preds.t <- reglacorte(data$removidos, t)
error.t[t+1] <- mean(abs(preds.t - data$especie))
}
plot(ts, error.t, ylim=c(-0.05, 1), col='steelblue', pch=20)
text(x=ts, y=error.t+0.05, labels=error.t)
grid()
abline(h=0, col='red')
abline(h=min(error.t), col='green', lty=3)
ts[which.min(error.t)]
ErrorClassTrue <- function(h){
X <- data$removidos
Y <- data$especie
m <- length(X)
error <- 0
for(i in 1:m){
xi <- X[i]
yi <- Y[i]
print(h)
print(error)
print(xi)
print(yi)
print(h[xi])
error <- error + (h[xi] == yi)
}
print("Error")
print(error)
error <- error / m
return(error)
}
ErrorClassTrue(c(1,1,1,1,1,1,1,1,1))
x <- 5
X <-3
x
X
View(ErrorClassTrue)
error <- error + as.integer(h[xi] == yi)
ErrorClassTrue <- function(h){
X <- data$removidos
Y <- data$especie
m <- length(X)
error <- 0
for(i in 1:m){
xi <- X[i]
yi <- Y[i]
print(h)
print(error)
print(xi)
print(yi)
print(h[xi])
error <- error + as.integer(h[xi] == yi)
}
print("Error")
print(error)
error <- error / m
return(error)
}
datos <- read.csv('./datos.csv', header=TRUE, sep=",")
# visualizar los datos con
View(datos)
file.choose()
getwd
getwd()
getwd()
# visualizar los datos con
View(datos[datos$rt<5000])
# visualizar los datos con
View(datos[datos$rt<5000,])
datos <- read.csv('./datos.csv', header=TRUE, sep=",")
# visualizar los datos con
head(datos)
plot(datos[datos$subject==1, 'dots_left'] - datos[datos$subject==1, 'dots_right'], pch=20, col='black')
dif_correcta <- datos[datos$subject==1 & datos$correct == T, 'dots_left'] - datos[datos$subject==1 & datos$correct == T, 'dots_right']
dif_incorrecta <- datos[datos$subject==1 & datos$correct == F, 'dots_left'] - datos[datos$subject==1 & datos$correct == F, 'dots_right']
plot(dif_correcta , pch=20, col='black')
points(dif_incorrecta, pch=20, col='red')
grid()
library(ggplot2)
#install.packages("gridExtra")
library(gridExtra)
ggplot(datos[datos$subject==1,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==1,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==2,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==3,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==4,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==5,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==6,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==7,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
stability.thr <- 50
datos.clean <- datos[datos$trial >= stability.thr, ]
length(datos.clean$trial)
mean(datos$correct)
mean(datos.clean$correct)
mean(datos$confidence)
mean(datos.clean$confidence)
max(datos$rt)/1000
min(datos$rt)/1000
ggplot(datos, aes(x=1:6480, y=rt, col=rt)) + geom_point()
ggplot(datos, aes(x=1:6480, y=sort(rt), col=rt)) + geom_point()
max.rt.thr  <- 5000
datos.clean <- datos[datos$trial >= stability.thr & datos$rt <= max.rt.thr, ]
length(datos$trial) - length(datos.clean$trial)
ggplot(datos.clean, aes(x=1:3785, y=rt, col=rt)) + geom_point()
ggplot(datos.clean, aes(x=1:3785, y=sort(rt), col=rt)) + geom_point()
hist(datos.clean[datos.clean$correct==1, 'rt'], breaks=100, col='steelblue', freq=F)
hist(datos.clean[datos.clean$correct==0, 'rt'], breaks=100, col=rgb(1,0,0,0.5), add=T, freq=F)
rw_decisiones <- function(n_pasos=1000, drift=0, sd_rw=1, umbral=10, x_ini=umbral/2, t0=500){
x  <- x_ini + cumsum( rnorm(n_pasos, mean=drift, sd=sd_rw) )
td <- which( x < 0 | x  > umbral )[1]
if(is.na(td)){
td <- n_pasos
}
rt <- t0 + td
resp <- sign(x[td] - x_ini)
out <- c(rt, resp)
return(out)
}
umbral <- 55
niveles <- 1
dificultades <- seq(0, 0.1, length.out = niveles)
dificultades <- c(0)
N          <- 2741
drift      <- sample(dificultades, N, replace=TRUE)
rw         <- data.frame(drift=drift, rt=rep(NA, N), resp=rep(NA, N))
for (i in 1:N){
out <- rw_decisiones(n_pasos=N, drift = drift[i], sd_rw = 1, umbral = umbral)
rw$rt[i]   <- out[1]
rw$resp[i] <- out[2]
}
#plot(density(datos.clean[datos.clean$correct==1, 'rt']))
plot(density(rw$rt), col="steelblue")
lines(density(datos.clean[, 'rt']), col='blue')
lines(density(datos.clean[datos.clean$correct==1, 'rt']))
lines(density(datos.clean[datos.clean$correct==0, 'rt']), col='red')
head(datos)
m <- length(datos$confidence)
hi.2 <- rep(NA, m)
fa.2 <- rep(NA, m)
ROC.2 <- data.frame(c1=rep(NA, 2),c2=rep(NA, 2),c3=rep(NA, 2),
c4=rep(NA, 2),c5=rep(NA, 2),c6=rep(NA, 2))
# Para cada nivel de confianza divido entre baja y alta confianza
confi <- c('c1','c2','c3','c4','c5','c6')
for(c in 1:6){
hi.2[c] <- sum(datos$confidence>=c & datos$correct==T)/m
fa.2[c] <- sum(datos$confidence>=c & datos$correct==F)/m
ROC.2[1, confi[c]] <- hi.2[c]
ROC.2[2, confi[c]] <- fa.2[c]
}
ROC.2
plot(fa.2, hi.2, type='b', lwd=3, col="steelblue", xlim=c(0,1), ylim=c(0,1))
grid()
lines(x=c(min(fa.2),max(fa.2)), y=c(min(hi.2),max(hi.2)))
for(p in 1:max(datos$subject)){
for(c in 1:6){
hi.2[c] <- sum(datos$confidence>=c & datos$correct==T)/m
fa.2[c] <- sum(datos$confidence>=c & datos$correct==F)/m
ROC.2[1, confi[c]] <- hi.2[c]
ROC.2[2, confi[c]] <- fa.2[c]
}
plot(fa.2, hi.2, type='b', lwd=3, col="steelblue", xlim=c(0,1), ylim=c(0,1))
grid()
lines(x=c(min(fa.2),max(fa.2)), y=c(min(hi.2),max(hi.2)))
}
library(ggplot2)
sdt_2_ot2_roc <- function(c2_rS1, c2_rS2, d, c, pS2){
pS1 = 1 - pS2
S2mu =  d/2
S1mu = -d/2
pHit  = 1 - pnorm(c,S2mu,1)
pCR   = pnorm(c,S1mu,1)
pC = pS2*pHit + pS1*pCR
pI = 1 - pC
# "S1"
cdfS1 = pnorm(c2_rS1,S1mu,1)
cdfS2 = pnorm(c2_rS1,S2mu,1)
h2_1 = cdfS1 * pS1 / pC
f2_1 = cdfS2 * pS2 / pI
# "S2"
cdfS1 = 1 - pnorm(c2_rS2,S1mu,1)
cdfS2 = 1 - pnorm(c2_rS2,S2mu,1)
h2_2 = cdfS2 * pS2 / pC
f2_2 = cdfS1 * pS1 / pI
h2 = h2_1 + h2_2
f2 = f2_1 + f2_2
return(c(f2, h2))
}
sdt_2_ot2_roc(0,0,1,0,0.5)
ROC.2[1, confi[c]] <- hi.2[c]
for(p in 1:max(datos$subject)){
for(c in 1:6){
hi.2[c] <- sum(datos$confidence>=c & datos$correct==T)/m
fa.2[c] <- sum(datos$confidence>=c & datos$correct==F)/m
ROC.2[1, confi[c]] <- hi.2[c]
ROC.2[2, confi[c]] <- fa.2[c]
}
plot(fa.2, hi.2, type='b', lwd=3, col="steelblue", xlim=c(0,1), ylim=c(0,1))
grid()
lines(x=c(min(fa.2),max(fa.2)), y=c(min(hi.2),max(hi.2)))
}
fa.2[c] <- sum(datos$subject == i & datos$confidence>=c & datos$correct==F)/120
for(i in 1:max(datos$subject)){
for(c in 1:6){
hi.2[c] <- sum(datos$subject == i & datos$confidence>=c & datos$correct==T)/120
fa.2[c] <- sum(datos$subject == i & datos$confidence>=c & datos$correct==F)/120
ROC.2[1, confi[c]] <- hi.2[c]
ROC.2[2, confi[c]] <- fa.2[c]
}
plot(fa.2, hi.2, type='b', lwd=3, col="steelblue", xlim=c(0,1), ylim=c(0,1))
grid()
lines(x=c(min(fa.2),max(fa.2)), y=c(min(hi.2),max(hi.2)))
}
for(i in 1:max(datos$subject)){
for(c in 1:6){
hi.2[c] <- sum(datos$subject == i & datos$confidence>=c & datos$correct==T)/120
fa.2[c] <- sum(datos$subject == i & datos$confidence>=c & datos$correct==F)/60
ROC.2[1, confi[c]] <- hi.2[c]
ROC.2[2, confi[c]] <- fa.2[c]
}
plot(fa.2, hi.2, type='b', lwd=3, col="steelblue", xlim=c(0,1), ylim=c(0,1))
grid()
lines(x=c(min(fa.2),max(fa.2)), y=c(min(hi.2),max(hi.2)), col='red')
}
for(i in 1:max(datos$subject)){
for(c in 1:6){
hi.2[c] <- sum(datos$subject == i & datos$confidence>=c & datos$correct==T)/120
fa.2[c] <- sum(datos$subject == i & datos$confidence>=c & datos$correct==F)/sum(datos$subject == i & datos$correct==F)
ROC.2[1, confi[c]] <- hi.2[c]
ROC.2[2, confi[c]] <- fa.2[c]
}
plot(fa.2, hi.2, type='b', lwd=3, col="steelblue", xlim=c(0,1), ylim=c(0,1))
grid()
lines(x=c(min(fa.2),max(fa.2)), y=c(min(hi.2),max(hi.2)), col='red')
}
for(i in 1:max(datos$subject)){
for(c in 1:6){
hi.2[c] <- sum(datos$subject == i & datos$confidence>=c & datos$correct==T)/sum(datos$subject == i & datos$correct==T)
fa.2[c] <- sum(datos$subject == i & datos$confidence>=c & datos$correct==F)/sum(datos$subject == i & datos$correct==F)
ROC.2[1, confi[c]] <- hi.2[c]
ROC.2[2, confi[c]] <- fa.2[c]
}
plot(fa.2, hi.2, type='b', lwd=3, col="steelblue", xlim=c(0,1), ylim=c(0,1))
grid()
lines(x=c(min(fa.2),max(fa.2)), y=c(min(hi.2),max(hi.2)), col='red')
}
for(i in 1:max(datos.clean$subject)){
for(c in 1:6){
hi.2[c] <- sum(datos.clean$subject == i & datos.clean$confidence>=c & datos.clean$correct==T)/sum(datos.clean$subject == i & datos.clean$correct==T)
fa.2[c] <- sum(datos.clean$subject == i & datos.clean$confidence>=c & datos.clean$correct==F)/sum(datos.clean$subject == i & datos.clean$correct==F)
ROC.2[1, confi[c]] <- hi.2[c]
ROC.2[2, confi[c]] <- fa.2[c]
}
plot(fa.2, hi.2, type='b', lwd=3, col="steelblue", xlim=c(0,1), ylim=c(0,1))
grid()
lines(x=c(min(fa.2),max(fa.2)), y=c(min(hi.2),max(hi.2)), col='red')
}
datos <- read.csv('./datos.csv', header=TRUE, sep=",")
# visualizar los datos con
head(datos)
datos <- read.csv('./datos.csv', header=TRUE, sep=",")
# visualizar los datos con
head(datos)
plot(datos[datos$subject==1, 'dots_left'] - datos[datos$subject==1, 'dots_right'], pch=20, col='black')
dif_correcta <- datos[datos$subject==1 & datos$correct == T, 'dots_left'] - datos[datos$subject==1 & datos$correct == T, 'dots_right']
dif_incorrecta <- datos[datos$subject==1 & datos$correct == F, 'dots_left'] - datos[datos$subject==1 & datos$correct == F, 'dots_right']
plot(dif_correcta , pch=20, col='black')
points(dif_incorrecta, pch=20, col='red')
grid()
library(ggplot2)
#install.packages("gridExtra")
library(gridExtra)
ggplot(datos[datos$subject==1,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==1,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==2,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==3,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==4,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==5,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==6,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
ggplot(datos[datos$subject==7,], aes(x=1:120, y=abs(dots_left-dots_right), col=correct)) + geom_point()
stability.thr <- 25
datos.clean <- datos[datos$trial >= stability.thr, ]
length(datos.clean$trial)
mean(datos$correct)
mean(datos.clean$correct)
mean(datos$confidence)
mean(datos.clean$confidence)
max(datos$rt)/1000
min(datos$rt)/1000
ggplot(datos, aes(x=1:6480, y=rt, col=rt)) + geom_point()
ggplot(datos, aes(x=1:6480, y=sort(rt), col=rt)) + geom_point()
max.rt.thr  <- 5000
datos.clean <- datos[datos$trial >= stability.thr & datos$rt <= max.rt.thr, ]
length(datos$trial) - length(datos.clean$trial)
ggplot(datos.clean, aes(x=1:3785, y=rt, col=rt)) + geom_point()
datos <- read.csv('./datos.csv', header=TRUE, sep=",")
# visualizar los datos con
head(datos)
plot(datos[datos$subject==1, 'dots_left'] - datos[datos$subject==1, 'dots_right'], pch=20, col='black')
tlmgr init-usertree
tlmgr
setwd("~/Ciencia-de-datos-con-R_Fundamentos-Estadisticos_2020/clase17 - Estimadores")
datos.gas1 <- read.csv('./datos_gas1_n_100.csv', dec='.')
hist(datos.gas1)
View(datos.gas1)
hist(1:30)
hist(datos.gas1$gas_equipo_1)
